<html>  
  <head>  
        <meta charset="utf-8">  
        <title>Final-project</title>
		<style>
			.axis path,
			.axis line{
				fill: none;
				stroke: black;
				shape-rendering: crispEdges;
			}

			.axis text {
				font-family: sans-serif;
				font-size: 11px;
			}

			
		</style>
  </head>  
    <body> 
	<div style="padding-left:200;">
		<form id="chooser">
		State:<select id="state" onchange="getData()">
			<option value="All">All</option>
			<option>Alabama</option>
			<option>Alaska</option>
			<option>Arizona</option>
			<option>Arkansas</option>
			<option>California</option>
			<option>Colorado</option>
			<option>Connecticut</option>
			<option>Delaware</option>
			<option>District of Columbia</option>
			<option>Florida</option>
			<option>Georgia</option>
			<option>Hawaii</option>
			<option>Idaho</option>
			<option>Illinois</option>
			<option>Indiana</option>
			<option>Iowa</option>
			<option>Kansas</option>
			<option>Kentucky</option>
			<option>Louisiana</option>
			<option>Maine</option>
			<option>Maryland</option>
			<option>Massachusetts</option>
			<option>Michigan</option>
			<option>Minnesota</option>
			<option>Mississippi</option>
			<option>Missouri</option>
			<option>Montana</option>
			<option>Nebraska</option>
			<option>Nevada</option>
			<option>New Hampshire</option>
			<option>New Jersey</option>
			<option>New Mexico</option>
			<option>New York</option>
			<option>North Carolina</option>
			<option>North Dakota</option>
			<option>Ohio</option>
			<option>Oklahoma</option>
			<option>Oregon</option>
			<option>Pennsylvania</option>
			<option>Rhode Island</option>
			<option>South Carolina</option>
			<option>South Dakota</option>
			<option>Tennessee</option>
			<option>Texas</option>
			<option>Utah</option>
			<option>Vermont</option>
			<option>Virginia</option>
			<option>Washington</option>
			<option>West Virginia</option>
			<option>Wisconsin</option>
			<option>Wyoming</option>
		</select><br/>
		Based on:<select id="based" onchange="getData()">
			<option value="Gender">Gender</option>
			<option value="Race">Race</option>
		</select><br/>
		</form>
	</div>
	<script>
		String.prototype.replaceAll = function(s1,s2){
	　　	return this.replace(new RegExp(s1,"gm"),s2);
	　　}
				
	</script> 
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>  
	
	<script>
		
		
		var mapDeaths = {};
		var mapPopulation = {};
		var mapData = {};
		var dict = {};
		var exp =0;
		dict["1002-5"]="American Indian or Alaska Native";
		dict["A-PI"]="Asian or Pacific Islander";
		dict["2054-5"]="Black or African American";
		dict["2106-3"]="White";
		dict["Male"]="Male";
		dict["Female"]="Female";

		

		function getLegend(legendCode){
			var i=0;
			var Obj = new Array();
			for(i=0;i<legendCode.length;i++)
				Obj[i]=dict[legendCode[i]];
			return Obj;
		}
		
		var based = "Gender";

		function getColor(d){
		    var dictColor = {};
			dictColor["1002-5"]="#6C3A27";
			dictColor["A-PI"]="#D3BD74";
			dictColor["2054-5"]="#000000";
			dictColor["2106-3"]="#38925E";
			dictColor["Male"]="#225A53";
			dictColor["Female"]="#FC5C1F";
			return dictColor[d];
		}

		function drawbar(data){
			d3.select("body svg").remove();
			//画布大小
			var width = 600;
			var height = 500;

			//在 body 里添加一个 SVG 画布   
			var svg = d3.select("body")
				.append("svg")
				.on("click",function(d,i){
					d3.select("body svg").remove();
					var se = document.getElementById("based");
					if(se.value=="Gender"){
						se.value="Race";
					}else{
						se.value="Gender";
					}
					getData();
				})
				.attr("width", width)
				.attr("height", height);

			//画布周边的空白
			 var padding = {left:200, right:30, top:150, bottom:20};

			 var dataset = {x:[],y:[]};
			 for(var index in data)
			 {
				dataset.x.push(index);
				dataset.y.push(data[index]);
			 }
			//console.log(dataset);
					
			//x轴的比例尺
			var xScale = d3.scale.ordinal()
				.domain(dataset.x)
				.rangeRoundBands([0, width - padding.left - padding.right],0,0);
								 
			//y轴的比例尺
			var yScale = d3.scale.linear()
				.domain([0, d3.max(dataset.y)])
				.range([height - padding.top - padding.bottom, 0]);
				
			var xAxis = d3.svg.axis()
				.scale(xScale)
				.orient("bottom");
					
			//定义y轴
			var yAxis = d3.svg.axis()
				.scale(yScale)
				.tickFormat(function(d) {
					//var commasFormatter = d3.format(",.0f")
					return d+"E-0"+exp.toString();  
				})
				.orient("left");

			//矩形之间的空白
			var rectPadding = 4;
			 
			

			//添加矩形元素
			var rects = svg.selectAll(".MyRect")
					.data(dataset.y)
					.enter()
					.append("rect")
					.attr("class","MyRect")
					.attr("transform","translate(" + padding.left + "," + padding.top + ")")
					.attr("x", function(d,i){
						return xScale(dataset.x[i]) + rectPadding/2;
					} )
					.attr("y",function(d){
						return yScale(d);
					})
					.attr("width", xScale.rangeBand() - rectPadding )
					.attr("height", function(d){
						return height - padding.top - padding.bottom - yScale(d);
					})
					.attr('fill', function(d, i) {
					   return getColor(dataset.x[i]);
					})


			var legend = svg.selectAll('g')
							.data(getLegend(dataset.x))
							.enter()
							.append('g')
							.attr('class', 'legend');

			legend.append('rect')
				.attr('x', 250)
				.attr('y', function(d, i){ return i *  20+20;})
				.attr('width', 30)
				.attr('height', 30)
				.style('fill', function(d, i) { 
				  return getColor(dataset.x[i]);
				});

			legend.append('text')
				.attr('x', 290)
				.attr('y', function(d, i){ return (i *  20) + 40;})
				.text(function(d){ return d; });

			svg.selectAll(".label")
            .data(dataset.y)
            .enter().append("text")
            .attr("class", "label")
            .attr("transform","translate(" + padding.left + "," + padding.top + ")")
			.attr("x", function(d,i){
				return xScale(dataset.x[i]) +xScale.rangeBand()/2+i*rectPadding+20;
			})
			.attr("y",function(d){
				return yScale(d)-5;
			})
            .attr("dx", ".35em") //  horizontal-align: middle 居中对齐
            .attr("dy", 0) // vertical-align: middle //垂直方向无偏移
            .attr("text-anchor", "end") // text-align: right
            .text(function(d) { return (Math.round(d*10)/10.0).toString()+"E-0"+exp.toString(); });

			//添加x轴
			svg.append("g")
			  .attr("class","axis")
			  .attr("transform","translate(" + padding.left + "," + (height - padding.bottom) + ")")
			  .attr('fill', "#0080BB")
			  .call(xAxis);
					
			//添加y轴
			svg.append("g")
			  .attr("class","axis")
			  .attr("transform","translate(" + padding.left + "," + padding.top + ")")
			  .attr('fill', "#0080BB")
			  .call(yAxis);

			
			svg.append("g") 
			 .append("text") 
			 .text(function(d,i){
				  return "Death Rate";				 
			  }) 
			 .attr("class","title") 
			 .attr("x",padding.left+100) 
			 .attr("y",padding.top-15); 

			
		}

		function clearMap(mapdata){
			for(var index in mapdata)
			   delete mapdata[index];
		}

		function getData(){
			
			clearMap(mapDeaths);
			clearMap(mapPopulation);
			clearMap(mapData);
				
			
			seState = document.getElementById("state").value; 
			based = document.getElementById("based").value; 

			d3.csv("data.csv",function(error,data){  
				if(error){  
					console.log(error);  
				}  
				//console.log(csvdata);  
				for( var j=0; j<data.length; j++ ){  
					var State = data[j]["State"].replace(/(^\s+)|(\s+$)/g, "");  
					var Gender = data[j]["Gender"].replace(/(^\s+)|(\s+$)/g, "");
					var Race = data[j]["Race Code"].replace(/(^\s+)|(\s+$)/g, "");
					var Deaths = data[j]["Deaths"].replace(/(^\s+)|(\s+$)/g, ""); 
					var Population = data[j]["Population"].replace(/(^\s+)|(\s+$)/g, ""); 
					if(typeof(State)=="undefined"){
						continue;
					}
					if(typeof(Deaths)=="undefined"){
						continue;
					}
					if(typeof(Population)=="undefined"){
						continue;
					}
					if(based == "Gender"){
						if(typeof(Gender)=="undefined"){
							continue;
						}
					}else if(based == "Race"){
						if(typeof(Race)=="undefined"){
							continue;
						}
					}
										
					if(isNaN(Deaths)){
						continue;
					}
					if(isNaN(Population)){
						continue;
					}

					if(seState!="All" && seState!=State)
						continue;

					if(based == "Gender"){
						if(Gender in mapDeaths){
						   mapDeaths[Gender]=parseFloat(mapDeaths[Gender])+parseFloat(Deaths);
						}else{
						   mapDeaths[Gender]=parseFloat(Deaths);
						}
						if(Gender in mapPopulation){
						   mapPopulation[Gender]=parseFloat(mapPopulation[Gender])+parseFloat(Population);
						}else{
						   mapPopulation[Gender]=parseFloat(Population);
						}
					}else if(based == "Race"){
						if(Race in mapDeaths){
						   mapDeaths[Race]=parseFloat(mapDeaths[Race])+parseFloat(Deaths);
						}else{
						   mapDeaths[Race]=parseFloat(Deaths);
						}
						if(Race in mapPopulation){
						   mapPopulation[Race]=parseFloat(mapPopulation[Race])+parseFloat(Population);
						}else{
						   mapPopulation[Race]=parseFloat(Population);
						}
					}
					
				}
				var max =0;
				for ( var key in mapDeaths ){
				   mapData[key]=mapDeaths[key]/mapPopulation[key];
				   if(mapData[key]>max)
						max=mapData[key];
				}
				var j=0;
				for(j=0;;){
					j=j+1;
					max=max*10;
					if(max>=1){
					    exp=j;
						break;
					}
				}
				for ( var key in mapDeaths ){
				   mapData[key]=mapData[key]*Math.pow(10,exp);  
				}
				
				drawbar(mapData);
			});
		}
		getData();
        </script>  
  
    </body>  
</html>  